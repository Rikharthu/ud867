// gradle -q hello
task hello{
    doLast{
        println "Hello world!"
    }
}

task upper {
    doLast {
        String someString = 'mY_nAmE'
        println "Original: " + someString
        println "Upper case: " + someString.toUpperCase()
    }
}

task count {
    doLast {
        4.times { print "$it " }
    }
}

// Task dependencies
task intro(dependsOn: hello) {
    doLast {
        println "I'm Gradle"
    }
}

// Lazy dependency - depend on taskY, which doesn't exist yet
task taskX(dependsOn: 'taskY') {
    doLast {
        println 'taskX'
    }
}
task taskY {
    doLast {
        println 'taskY'
    }
}

// Dynamic task creation
4.times { counter ->
    task "task$counter" {
        doLast {
            println "I'm task number $counter"
        }
    }
}

// manipulating existing tasks
task0.dependsOn task2, task3
// add behavior to an existing task:
// these doFirst will execute before original
// but doLast's will exeute after the original one
hello.doFirst {
    println 'Hello Venus'
}
hello.doLast {
    println 'Hello Mars'
}
hello {
    doLast {
        println 'Hello Jupiter'
    }
}

// Extra task properties
task myTask {
    ext.myProperty = "myValue"
}

task printTaskProperties {
    doLast {
        println myTask.myProperty
    }
}

// Using AntBuilder to execute and.loadfile target
task loadfile {
    doLast {
        def files = file('../antLoadfileResources').listFiles().sort()
        files.each { File file ->
            if (file.isFile()) {
                ant.loadfile(srcFile: file, property: file.name)
                println " *** $file.name ***"
                println "${ant.properties[file.name]}"
            }
        }
    }
}

// Using methods
task checksum {
    doLast {
        fileList('../antLoadfileResources').each { File file ->
            ant.checksum(file: file, property: "cs_$file.name")
            println "$file.name Checksum: ${ant.properties["cs_$file.name"]}"
        }
    }
}

// task loadfile {
//     doLast {
//         fileList('../antLoadfileResources').each { File file ->
//             ant.loadfile(srcFile: file, property: file.name)
//             println "I'm fond of $file.name"
//         }
//     }
// }

File[] fileList(String dir) {
    file(dir).listFiles({file -> file.isFile() } as FileFilter).sort()
}

// Default tasksdefaultTasks 'clean', 'run'
task clean {
    doLast {
        println 'Default Cleaning!'
    }
}

task run {
    doLast {
        println 'Default Running!'
    }
}

task other {
    doLast {
        println "I'm not a default task!"
    }
}

// Configure by DAG
task distribution {
    doLast {
        println "We build the zip with version=$version"
    }
}

task release(dependsOn: 'distribution') {
    doLast {
        println 'We release now'
    }
}
// Gradle knows what tasks should be executed
// and they can be accessed in the gradle.taskGraph
// depending on the tasks to be executed assign different values
gradle.taskGraph.whenReady {taskGraph ->
    if (taskGraph.hasTask(release)) {
        version = '1.0'
    } else {
        version = '1.0-SNAPSHOT'
    }
}